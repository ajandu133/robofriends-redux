{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobot","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.96b1f067.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib pa3 br4 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n// Destructing\r\n\r\n// simplify x1\r\n// const Card = (props) => {\r\n//     const { name, email, id } = props;\r\n//     return (\r\n//         <div className='tc bg-light-green dib pa3 br4 ma2 grow bw2 shadow-5'>\r\n//             <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n//             <div>\r\n//                 <h2>{name}</h2>\r\n//                 <p>{email}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// original\r\n// const Card = (props) => {\r\n//     return (\r\n//         <div className='tc bg-light-green dib pa3 br4 ma2 grow bw2 shadow-5'>\r\n//             <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n//             <div>\r\n//                 <h2>{props.name}</h2>\r\n//                 <p>{props.email}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }","import React from 'react';\r\nimport Card from './Card'\r\n// import { robots } from '../robots';\r\n\r\nconst CardList = ({ robots }) => {\r\n     return(   \r\n        robots.map((user, i) => {\r\n            return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n        })\r\n    );\r\n} \r\n\r\n\r\nexport default CardList;\r\n\r\n// loop created\r\n// const CardList = ({ robots }) => {\r\n//     const cardArray = robots.map((user, i) => {\r\n//         return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n// })\r\n//     return (\r\n//         <div>\r\n//           {cardArray}\r\n//         </div>\r\n//     );\r\n// } \r\n\r\n// original\r\n// const CardList = ({ robots }) => {\r\n    //     return (\r\n    //         <div>\r\n    //           <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n    //           <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n    //           <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n    //         </div>\r\n    //     );\r\n    //     } \r\n    \r\n// apply card & extra id from cards 1 & 2. I need them for all cards though.\r\n    // { robots } => {\r\n    //     <Card id={robots[0].id} />\r\n    //     <Card id={robots[1].id} />\r\n    // }\r\n// Use map function to create a new array applying Card & extrating from each object\r\n    // { robots } => {\r\n    //     robots.map((value, i) => {\r\n    //         return (\r\n    //             <Card id={robots[i].id} />\r\n    //         )\r\n    //     }\r\n    // }\r\n// This entire array is to be returned. This is the modded card list. \r\n    // const CardList = ({ robots }) => {\r\n    //     return (\r\n    //          robots.map((value, i) => {\r\n    //             return (<Card id={robots[i].id} />)\r\n    //         }\r\n    //     )\r\n    // )\r\n// }","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input\r\n             className='pa3 ba b--green bg-lightest-blue'\r\n             type='search' \r\n             placeholder='search robots' \r\n             onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n\r\n// every time the search box is modified i.e onChange, call the {searchChange} function\r\n// {searchChange} is a prop of App\r\n//{searchChange} prop is the this.onSearchChange function in APP\r\n// triggers console.log\r\n\r\n// class App extends Component {\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             robots: robots,\r\n//             searchfields: ''\r\n//         }\r\n//     }\r\n//     onSearchChange(event) {\r\n//         console.log(event.target.value)\r\n//     }\r\n//     render() {\r\n//         return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox searchChange={this.onSearchChange}/>\r\n//             <CardList robots={this.state.robots}/>\r\n//         </div>\r\n//             )\r\n//         }\r\n// }\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { robots } from '../robots';\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\n// listens to what needs to be sent\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\n// which props are actions that need to be dispatched\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n   \r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobot = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        \r\n        return isPending ?\r\n            <h1 className='tc'>Loading</h1> :\r\n            (\r\n                <div className= 'tc'>\r\n                    <h1 className = 'f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobot}/>\r\n                    </Scroll>\r\n                </div>\r\n                    )\r\n\r\n    }}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n// App walkthrough\r\n// We create aa class app with components such as contructor\r\n// the consuctor creates a state, rob0ts & search field which only lives in App\r\n// class App passes down props, such as onSearchChange to SearchBox\r\n// everytime there is onChange in the Input, it refers to prop searchChange which activates function onSearch change which\r\n// updates the state of the search field with the event/to what we type \r\n// with information from event of search box, we communicate with CardList\r\n// tell Cardlist to filter only what includes the search field\r\n\r\n// instead of passing robots = this.state.robots we pass filtered robots to pick one name\r\n\r\n// does there need to be a state robots? as it never really changes. not really but this is good practice\r\n\r\n\r\n    \r\n\r\n// STATE object that can change and effect application\r\n//  in this app State is what comes into search box\r\n//  in this app state is which robot we choose\r\n// \r\n//original code\r\n//  const App = () => {\r\n//     return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox/>\r\n//             <CardList robots={robots}/>\r\n//          </div>\r\n//         )\r\n//         }\r\n//     export default App\r\n\r\n// conversion to App extends. Also change top line to React, { Component }\r\n// class App extends Component {\r\n//     render() {\r\n//     return(\r\n//     <div className= 'tc'>\r\n//         <h1>RoboFriends</h1>\r\n//         <SearchBox/>\r\n//         <CardList robots={robots}/>\r\n//      </div>\r\n//      )\r\n//     }\r\n// }\r\n\r\n// add states to code using constructor\r\n// class App extends Component {\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             robots: robots,\r\n//             searchfields: ''\r\n//         }\r\n//     }\r\n//     render() {\r\n//         return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox/>\r\n//             <CardList robots={robots}/>\r\n//         </div>\r\n//             )\r\n//         }\r\n// }\r\n\r\n// link the input search box to this file and log clikck in console log\r\n// class App extends Component {\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             robots: robots,\r\n//             searchfield: ''\r\n//         }\r\n//     }\r\n//     onSearchChange = (event) => {\r\n//           console.log(event)\r\n//     }\r\n    \r\n//     render() {\r\n//         return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox searchChange={this.onSearchChange}/>\r\n//             <CardList robots={this.state.robots}/>\r\n//         </div>\r\n//             )\r\n//         }\r\n// }\r\n\r\n// right before we move const filteredRobots under return to call the robot we want from the card list\r\n// class App extends Component {\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             robots: robots,\r\n//             searchfield: ''\r\n//         }\r\n//     }\r\n//     onSearchChange = (event) => {\r\n//             this.setState({ searchfield: event.target.value })\r\n//             const filteredRobots = this.state.robots.filter(robot => {\r\n//             return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n//         })\r\n//     }\r\n    \r\n//     render() {\r\n//         return(\r\n//         <div className= 'tc'>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox searchChange={this.onSearchChange}/>\r\n//             <CardList robots={this.state.robots}/>\r\n//         </div>\r\n//             )\r\n//         }\r\n// }\r\n\r\n// old statement\r\n        // if (robots.length === 0) {\r\n        //     return <h1 className='tc'>Loading</h1>\r\n        // } else {\r\n        // return(\r\n        // <div className= 'tc'>\r\n        //     <h1 className = 'f1'>RoboFriends</h1>\r\n        //     <SearchBox searchChange={onSearchChange}/>\r\n        //     <Scroll>\r\n        //         <CardList robots={filteredRobot}/>\r\n        //     </Scroll>\r\n        // </div>\r\n        //     )","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n\r\n} from './constants.js'\r\n\r\n// Redux Action\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n\r\n// export const setSearchField = (text) => {\r\n//     console.log(text);\r\n//     return {\r\n//         type: CHANGE_SEARCH_FIELD,\r\n//         payload: text\r\n//     }\r\n//     // type: CHANGE_SEARCH_FIELD,\r\n//     // payload: text\r\n// }\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD } from './constants.js';\r\nimport { \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n// create initial state\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\n// create Reducer, the function \r\n// takes in state (search), what action just happened (objects)\r\n// if we care about the action, it will do something\r\n// single source of truth, state read only, pure function (return one thing)\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false})\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\n// // did change CHANGE_SEARCH_FIELD happen? run console log\r\n// export const searchRobots = (state=intialState, action={}) => {\r\n//     console.log(action.type)\r\n//     switch (action.type) {\r\n//         case CHANGE_SEARCH_FIELD:\r\n//             return Object.assign({}, state, { searchField: action.payload })\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\n// import Card from './Card';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots} )\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n       <Provider store={store}>\r\n          <App  />\r\n       </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//         <div>\r\n//           <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n//           <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n//           <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n//         </div>\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n"],"sourceRoot":""}